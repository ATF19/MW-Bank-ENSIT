/* tslint:disable */
/* eslint-disable */
/**
 * MW Bank ENSIT
 * MaibornWolff Bank - ENSIT
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTransferDto } from '../dto';
// @ts-ignore
import { TransferDto } from '../dto';
/**
 * TransferRestServiceApi - axios parameter creator
 * @export
 */
export const TransferRestServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allTransfers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTransferDto} createTransferDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransfer: async (createTransferDto: CreateTransferDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTransferDto' is not null or undefined
            assertParamExists('createTransfer', 'createTransferDto', createTransferDto)
            const localVarPath = `/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTransferDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransferRestServiceApi - functional programming interface
 * @export
 */
export const TransferRestServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransferRestServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allTransfers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransferDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allTransfers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTransferDto} createTransferDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransfer(createTransferDto: CreateTransferDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransfer(createTransferDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransferRestServiceApi - factory interface
 * @export
 */
export const TransferRestServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransferRestServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allTransfers(options?: any): AxiosPromise<Array<TransferDto>> {
            return localVarFp.allTransfers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTransferDto} createTransferDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransfer(createTransferDto: CreateTransferDto, options?: any): AxiosPromise<TransferDto> {
            return localVarFp.createTransfer(createTransferDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransferRestServiceApi - interface
 * @export
 * @interface TransferRestServiceApi
 */
export interface TransferRestServiceApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferRestServiceApiInterface
     */
    allTransfers(options?: any): AxiosPromise<Array<TransferDto>>;

    /**
     * 
     * @param {CreateTransferDto} createTransferDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferRestServiceApiInterface
     */
    createTransfer(createTransferDto: CreateTransferDto, options?: any): AxiosPromise<TransferDto>;

}

/**
 * TransferRestServiceApi - object-oriented interface
 * @export
 * @class TransferRestServiceApi
 * @extends {BaseAPI}
 */
export class TransferRestServiceApi extends BaseAPI implements TransferRestServiceApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferRestServiceApi
     */
    public allTransfers(options?: any) {
        return TransferRestServiceApiFp(this.configuration).allTransfers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTransferDto} createTransferDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferRestServiceApi
     */
    public createTransfer(createTransferDto: CreateTransferDto, options?: any) {
        return TransferRestServiceApiFp(this.configuration).createTransfer(createTransferDto, options).then((request) => request(this.axios, this.basePath));
    }
}
